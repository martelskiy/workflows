name: "Terraform Deploy Reusable Workflow"

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      environment:
        description: "environment to deploy to - development or production"
        type: string
        required: true
      download-artifact-path:
        description: "Artifact path including file name"
        required: false
        type: string
      artifact-name:
        description: "Name of the artifact. Required if download-artifact-path input is set"
        required: false
        type: string

env:
  TF_LOG: WARN
  TF_IN_AUTOMATION: 1
  TF_INPUT: 0
  TF_PLAN_FILE: tf.plan
  AWS_REGION: "eu-north-1"
  TF_VERSION: ~1.5
  TF_VAR_github_sha: ${{ github.sha }}

jobs:
  terraform-deploy-development:
    name: "Deploy infrastructure to Development"
    if: inputs.environment == 'development'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - uses: actions/download-artifact@v3
        if: inputs.download-artifact-path != ''
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.download-artifact-path }}

      - name: Configure AWS Credentials development
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::226165991761:role/github-actions
          role-session-name: GithubActionsSession

      - name: Terraform Init Development
        id: init
        run: terraform init -backend-config="vars/backend/development.tfvars"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan Development
        id: plan
        run: terraform plan -var-file="vars/development.tfvars" -out="${TF_PLAN_FILE}"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve ${TF_PLAN_FILE}

  terraform-deploy-production:
    name: "Deploy infrastructure to Production"
    if: inputs.environment == 'production'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - uses: actions/download-artifact@v3
        if: inputs.download-artifact-path != ''
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.download-artifact-path }}

      - name: Configure AWS Credentials Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::480162773870:role/github-actions
          role-session-name: GithubActionsSession

      - name: Terraform Init Production
        id: init
        run: terraform init -backend-config="vars/backend/production.tfvars"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan Production
        id: plan
        run: terraform plan -var-file="vars/production.tfvars" -out="${TF_PLAN_FILE}"

      - name: Terraform Apply
        run: terraform apply -auto-approve ${TF_PLAN_FILE}
